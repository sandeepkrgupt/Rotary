import React from 'react';
import Widget from 'Widget';
import DonationConfirmation from 'DonationConfirmation';
import DonationConfirmationSimple from 'DonationConfirmationSimple';
import GlobalStyles from 'globalStyles';
import withLogic from 'AppContainer/logic';
import DonationDetails from 'DonationDetails';
import DedicationPreview from 'Dedication/components/DedicationPreview';
import AlertModal from 'AlertModal';

const App = ({
  createdBy,
  preferredLang,
  isCloseWidgetEnabled,
  activeFundTab,
  showAlertButton,
  alert,
  amount,
  amountHandlers,
  behalf,
  behalfHandlers,
  billingAddress,
  billingAddressHandlers,
  country,
  currencies,
  currency,
  currencyRecurringEnabled,
  customAmount,
  customAmountShown,
  dedication,
  dedicationHandlers,
  donationDetailsEnabled,
  donationDetailsVisibility,
  donationType,
  fixedAmount,
  foundation,
  frequency,
  fund,
  fundSelectable,
  interval,
  oneTimeEnabled,
  paymentWorkflowRedirect,
  personalDetails,
  personalDetailsHandlers,
  previewDedication,
  raiseNowCustomerToken,
  raiseNowScriptErrorStatus,
  raiseNowSubscriptionId,
  raiseNowWidgetId,
  raiseNowWidgetIsLoaded,
  raiseNowWidgetIsLoading,
  rates,
  recurringEnabled,
  reducerError,
  selectedGrantId,
  setActiveFundTab,
  setAlert,
  setCountry,
  setCountryOverridable,
  setCurrency,
  setDonationDetailsVisibility,
  setDonationType,
  setFoundation,
  setFrequency,
  setFrequencyError,
  setFund,
  setGrantId,
  setGrantsError,
  setInterval,
  setRaiseNowScriptErrorStatus,
  setRaiseNowValidationErrors,
  setRaiseNowWidgetIsLoaded,
  setRaiseNowWidgetIsLoading,
  setStartDateDetails,
  setTransactionData,
  setUser,
  setPreferredLang,
  setCreatedBy,
  signInFormVisibility,
  startDateDetails,
  stateForDebugging,
  submitForm,
  toggleSignInFormVisibility,
  transactionData,
  user,
  userIsLeader,
  setRequestSource,
  setRequestSourceError,
  staffUseOnly,
  setAnonymous,
  setQpqQuantity,
  setOverrideDate,
  setQpqQuantityError,
  setNotes,
  setRecognitionDestination,
  setRecognitionDestinationName,
  setRecognitionAddressLine1,
  setRecognitionAddressLine2,
  setRecognitionAddressLine3,
  setRecognitionCity,
  setRecognitionStateProvince,
  setRecognitionPostalCode,
  setRecognitionCountry,
  setPresentationDate,
  setDonorType,
  setPaymentType,
  setPaymentTypeError,
  setPaymentAmount,
  setPaymentAmountError,
  donorType,
  toggleMultipleDonorVisibility,
  toggelOverrideCreditOrgVisibility,
  setOccasion,
  setRecipientName,
  setAddressLine1,
  setAddressLine2,
  setAddressLine3,
  setCity,
  setProvince,
  setPostalCode,
  setMailLetterCountry
}) =>
  (<GlobalStyles>
    {donationDetailsVisibility &&
      <DonationDetails
        {...{
          amount,
          behalf,
          billingAddress,
          billingAddressHandlers,
          country,
          currency,
          dedication,
          donationType,
          foundation,
          frequency,
          fund,
          grantsError: reducerError.grantsError.status,
          personalDetails,
          personalDetailsHandlers,
          raiseNowWidgetId,
          recurringEnabled,
          selectedGrantId,
          setDonationDetailsVisibility,
          startDateDetails,
          submitForm,
          staffUseOnly
        }}
      />}
    {dedication.dedicationPreviewVisibility &&
      <DedicationPreview
        dedication={dedication}
        dedicationHandlers={dedicationHandlers}
      />}
    {(!!transactionData &&
      ((!paymentWorkflowRedirect &&
        <DonationConfirmation
          currencies={currencies}
          rates={rates}
          fund={fund}
          transactionData={transactionData}
          user={user}
          behalf={behalf}
          donationType={donationType}
          recurringEnabled={recurringEnabled}
          frequency={frequency}
          startDateDetails={startDateDetails}
          dedication={dedication}
          foundation={foundation}
        />) ||
        <DonationConfirmationSimple
          transactionData={transactionData}
        />)
    ) ||
      <Widget
        {...{
          preferredLang,
          createdBy,
          isCloseWidgetEnabled,
          activeFundTab,
          amount,
          amountHandlers,
          behalf,
          behalfHandlers,
          country,
          currency,
          currencyRecurringEnabled,
          customAmount,
          customAmountShown,
          dedication,
          dedicationHandlers,
          donationDetailsEnabled,
          donationType,
          fixedAmount,
          foundation,
          frequency,
          fund,
          fundSelectable,
          grantsError: reducerError.grantsError,
          interval,
          oneTimeEnabled,
          paymentWorkflowRedirect,
          previewDedication,
          raiseNowCustomerToken,
          raiseNowScriptErrorStatus,
          raiseNowSubscriptionId,
          raiseNowWidgetId,
          raiseNowWidgetIsLoaded,
          raiseNowWidgetIsLoading,
          recurringEnabled,
          reducerError,
          selectedGrantId,
          setActiveFundTab,
          setAlert,
          setCountry,
          setCountryOverridable,
          setCurrency,
          setDonationDetailsVisibility,
          setDonationType,
          setFoundation,
          setFrequency,
          setFrequencyError,
          setFund,
          setGrantId,
          setGrantsError,
          setInterval,
          setRaiseNowScriptErrorStatus,
          setRaiseNowValidationErrors,
          setRaiseNowWidgetIsLoaded,
          setRaiseNowWidgetIsLoading,
          setStartDateDetails,
          setTransactionData,
          setUser,
          setPreferredLang,
          setCreatedBy,
          signInFormVisibility,
          stateForDebugging,
          submitForm,
          toggleSignInFormVisibility,
          user,
          userIsLeader,
          setRequestSource,
          setRequestSourceError,
          staffUseOnly,
          setAnonymous,
          setQpqQuantity,
          setOverrideDate,
          setQpqQuantityError,
          setNotes,
          setRecognitionDestination,
          setRecognitionDestinationName,
          setRecognitionAddressLine1,
          setRecognitionAddressLine2,
          setRecognitionAddressLine3,
          setRecognitionCity,
          setRecognitionStateProvince,
          setRecognitionPostalCode,
          setRecognitionCountry,
          setPresentationDate,
          setDonorType,
          setPaymentType,
          setPaymentTypeError,
          setPaymentAmount,
          setPaymentAmountError,
          donorType,
          toggleMultipleDonorVisibility,
          toggelOverrideCreditOrgVisibility,
          setOccasion,
          setRecipientName,
          setAddressLine1,
          setAddressLine2,
          setAddressLine3,
          setCity,
          setProvince,
          setPostalCode,
          setMailLetterCountry
        }}
      />}
    {alert &&
      <AlertModal onClose={setAlert} message={alert} showAlertButton={showAlertButton} />}
  </GlobalStyles>);

export default config => {
  return withLogic(config, App);
};